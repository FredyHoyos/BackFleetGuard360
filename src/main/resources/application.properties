spring.application.name=fleetguard-api
server.port=8080

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=${DB_URL}
spring.datasource.username=${POSTGRES_DB_USER}
spring.datasource.password=${POSTGRES_PWD}

# Configuracion para la documentacion de Swagger
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html


# Configuracin de JPA/Hibernate

# Define el dialecto de SQL que Hibernate debe usar para PostgreSQL.
# Esto asegura que las consultas generadas sean compatibles con PostgreSQL.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Controla el comportamiento de Hibernate con respecto al esquema de la base de datos.
# - 'create' elimina y vuelve a crear las tablas cada vez que la aplicaci?n se inicia.
# - 'update' actualiza el esquema para que coincida con las entidades, sin eliminar columnas existentes.
# - 'create-drop' crea las tablas y las elimina al detenerse la aplicaci?n.
# - 'validate' valida que el esquema coincida con las entidades sin hacer cambios.
# - 'none' no realiza ninguna accion sobre el esquema.
spring.jpa.hibernate.ddl-auto=validate
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=update
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=update.sql

server.error.whitelabel.enabled=false
server.error.path=/error
server.servlet.context-path=/
server.error.include-exception=true
server.error.include-message=ALWAYS
server.error.include-stacktrace=ALWAYS

access-token.private=${PATH_PRIVATE}
access-token.public=${PATH_PUBLIC}
refresh-token.private=${PATH_REFRESH_PRIVATE}
refresh-token.public=${PATH_REFRESH_PUBLIC}

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.boot.autoconfigure.jdbc=DEBUG

file.upload-dir=src/main/resources/uploads/photos